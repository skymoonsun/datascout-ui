<?php/*define( 'BASE_DIR', "/var/www/vhosts/c4game.net");define( 'MAIN_FOLDER', "/httpdocs");define( 'ADMIN_FOLDER', "/admin.c4game.net");define( 'BASE_PATH', BASE_DIR.MAIN_FOLDER);define( 'ADMIN_PATH', BASE_DIR.ADMIN_FOLDER);*/function dusuk_fiyat($game_id){    $site = new Site();    $sites = $site->search(array("SITE_TYPE" => "Satış"),array("SITE_ID" => "ASC"));    $fiyat_a = array();    foreach($sites as $ss){        $site2 = new Site2();        $site2s = $site2->search(array("SITE_2_GAME_ID" => $game_id, "SITE_2_SITE_ID" => $ss["SITE_ID"]),array("SITE_2_CONTENT" => "ASC"));        foreach($site2s as $s2s){            $fiyat_a[] = $s2s["SITE_2_CONTENT"];        }    }    asort($fiyat_a);    $fiyat = array_shift($fiyat_a);    return $fiyat;}function sifrele($metin){    $sifreli = md5($metin);    $bir = substr($sifreli, 0, 16);    $iki= substr($sifreli, 16, 16);    $sifreli = $iki.$bir;    $sifreli = sha1($sifreli);    $bir = substr($sifreli, 0, 20);    $iki= substr($sifreli, 20, 20);    $sifreli = $iki.$bir;    $sifreli = md5($sifreli);    $bir = substr($sifreli, 0, 16);    $iki= substr($sifreli, 16, 16);    $sifreli = $iki.$bir;    return($sifreli);}function permalink($string){    $find = array('Ç', 'Ş', 'Ğ', 'Ü', 'İ', 'Ö', 'ç', 'ş', 'ğ', 'ü', 'ö', 'ı', '+', '#', '.');    $replace = array('c', 's', 'g', 'u', 'i', 'o', 'c', 's', 'g', 'u', 'o', 'i', '-', 'sharp', '-');    $string = strtolower(str_replace($find, $replace, $string));    $string = preg_replace("@[^A-Za-z0-9\-_\.\+]@i", ' ', $string);    $string = trim(preg_replace('/\s+/', ' ', $string));    $string = str_replace(' ', '-', $string);    return $string;}function permalink2($string){    $string = str_replace("'", "", $string);    $find = array('Ç', 'Ş', 'Ğ', 'Ü', 'İ', 'Ö', 'ç', 'ş', 'ğ', 'ü', 'ö', 'ı', '+', '#', '.');    $replace = array('c', 's', 'g', 'u', 'i', 'o', 'c', 's', 'g', 'u', 'o', 'i', '-', 'sharp', '-');    $string = strtolower(str_replace($find, $replace, $string));    $string = preg_replace("@[^A-Za-z0-9\-_\.\+]@i", ' ', $string);    $string = trim(preg_replace('/\s+/', ' ', $string));    $string = str_replace(' ', '-', $string);    return $string;}function xmlToArray($xml, $options = array()) {    $defaults = array(        'namespaceSeparator' => ':',//you may want this to be something other than a colon        'attributePrefix' => '@',   //to distinguish between attributes and nodes with the same name        'alwaysArray' => array(),   //array of xml tag names which should always become arrays        'autoArray' => true,        //only create arrays for tags which appear more than once        'textContent' => '$',       //key used for the text content of elements        'autoText' => true,         //skip textContent key if node has no attributes or child nodes        'keySearch' => false,       //optional search and replace on tag and attribute names        'keyReplace' => false       //replace values for above search values (as passed to str_replace())    );    $options = array_merge($defaults, $options);    $namespaces = $xml->getDocNamespaces();    $namespaces[''] = null; //add base (empty) namespace    //get attributes from all namespaces    $attributesArray = array();    foreach ($namespaces as $prefix => $namespace) {        foreach ($xml->attributes($namespace) as $attributeName => $attribute) {            //replace characters in attribute name            if ($options['keySearch']) $attributeName =                str_replace($options['keySearch'], $options['keyReplace'], $attributeName);            $attributeKey = $options['attributePrefix']                . ($prefix ? $prefix . $options['namespaceSeparator'] : '')                . $attributeName;            $attributesArray[$attributeKey] = (string)$attribute;        }    }    //get child nodes from all namespaces    $tagsArray = array();    foreach ($namespaces as $prefix => $namespace) {        foreach ($xml->children($namespace) as $childXml) {            //recurse into child nodes            $childArray = xmlToArray($childXml, $options);            list($childTagName, $childProperties) = each($childArray);            //replace characters in tag name            if ($options['keySearch']) $childTagName =                str_replace($options['keySearch'], $options['keyReplace'], $childTagName);            //add namespace prefix, if any            if ($prefix) $childTagName = $prefix . $options['namespaceSeparator'] . $childTagName;            if (!isset($tagsArray[$childTagName])) {                //only entry with this key                //test if tags of this type should always be arrays, no matter the element count                $tagsArray[$childTagName] =                    in_array($childTagName, $options['alwaysArray']) || !$options['autoArray']                        ? array($childProperties) : $childProperties;            } elseif (                is_array($tagsArray[$childTagName]) && array_keys($tagsArray[$childTagName])                === range(0, count($tagsArray[$childTagName]) - 1)            ) {                //key already exists and is integer indexed array                $tagsArray[$childTagName][] = $childProperties;            } else {                //key exists so convert to integer indexed array with previous value in position 0                $tagsArray[$childTagName] = array($tagsArray[$childTagName], $childProperties);            }        }    }    //get text content of node    $textContentArray = array();    $plainText = trim((string)$xml);    if ($plainText !== '') $textContentArray[$options['textContent']] = $plainText;    //stick it all together    $propertiesArray = !$options['autoText'] || $attributesArray || $tagsArray || ($plainText === '')        ? array_merge($attributesArray, $tagsArray, $textContentArray) : $plainText;    //return node as array    return array(        $xml->getName() => $propertiesArray    );}function similar_in_array( $sNeedle , $aHaystack ){    foreach ($aHaystack as $sKey)    {        if( @stripos( strtolower($sKey) , strtolower($sNeedle) ) !== false )        {            return true;        }    }    return false;}function dizi_bul($aranan, $dizi){    $cikti = array();    for($i=0; $i<count($dizi); $i++){        /* içinde geçeni buluyo        if(similar_in_array($aranan , $dizi[$i])){            array_push($cikti, $dizi[$i]);        }        direkt aynısını buluyo */        if(in_array($aranan , $dizi[$i])){            array_push($cikti, $dizi[$i]);        }    }    return $cikti;}function dizi_bul2($aranan, $dizi){    $cikti = array();    for($i=0; $i<count($dizi); $i++){        if(similar_in_array($aranan , $dizi[$i])){            array_push($cikti, $dizi[$i]);        }    }    return $cikti;}function temizle($veri){    return trim(strip_tags($veri));}function temizleGet($veri){    return trim(strip_tags(htmlentities(str_replace("'", "\'", $veri))));}function temizle_sayi($veri){    return preg_replace("#[^0-9]#",'', temizleGet($veri));}function temizleInt($veri){    return preg_replace("#[^0-9]#",'', temizleGet($veri));}function temizle_tag($veri){    return trim(htmlentities($veri));}function ip(){    $client  = @$_SERVER['HTTP_CLIENT_IP'];    $forward = @$_SERVER['HTTP_X_FORWARDED_FOR'];    $remote  = $_SERVER['REMOTE_ADDR'];    if(filter_var($client, FILTER_VALIDATE_IP)){$ip = $client;}    elseif(filter_var($forward, FILTER_VALIDATE_IP)){$ip = $forward;}    else{$ip = $remote;}    return $ip;}function onay(){    /*    $karakterler = "1234567890abcdefghijKLMNOPQRSTuvwxyzABCDEFGHIJklmnopqrstUVWXYZ0987654321";    $sifre = '';    for($i=0;$i<72;$i++)                    //Oluşturulacak şifrenin karakter sayısı 8'dir.    {        $sifre .= $karakterler{rand() % 72};    //$karakterler dizisinden ilk 72 karakter kullanılacak, yani hepsi.    }    return $sifre;                            //Oluşturulan şifre gönderiliyor.    */}require 'Zebra_cURL.php';require "simple_html_dom.php";/*function curl($url){    $curl = curl_init();    curl_setopt($curl, CURLOPT_URL, $url);    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);    curl_setopt($curl,CURLOPT_USERAGENT, $_SERVER["HTTP_USER_AGENT"]);    //curl_setopt($curl, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4 );    //curl_setopt($curl,CURLOPT_PROXY, '78.186.194.45');    //curl_setopt($curl,CURLOPT_PROXYPORT, '8080');    $cikti = curl_exec($curl);    curl_close($curl);    $cikti = str_replace(array("\n","\t","\r"), null, $cikti);    return $cikti;}*/function veri_cekk($bas, $son, $yazi){    @preg_match_all('/' . preg_quote($bas, '/') .        '(.*?)'. preg_quote($son, '/').'/i', $yazi, $m);    return @$m[1];}function clean($string) {    $string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.    $string = preg_replace('/[^0-9.,]/', '', $string); // Removes special chars.    return preg_replace('/-+/', '-', $string); // Replaces multiple hyphens with single one.}function redirect_affiliate($site_id, $link){    require_once 'Site.class.php';    $paths = parse_ini_file("/var/www/app/defines.php");    $site = new Site();    $site->find($site_id);    $new_price_tag = $site->SITE_XML_PRICE_TAG;    $new_discount_tag = $site->SITE_XML_DISCOUNT_TAG;    $new_stock_tag = $site->SITE_XML_STOCK_TAG;    $new_affiliate_tag = $site->SITE_XML_AFFILIATE_TAG;    $new_main_tag = $site->SITE_XML_MAIN_TAG;    $new_product_tag = $site->SITE_XML_PRODUCT_TAG;    $new_link_tag = $site->SITE_XML_LINK_TAG;    if($site->SITE_XML_LINK_TAG_DOUBLE==1){        $link = str_replace($site->SITE_XML_LINK_TAG, '', $link);        $new_link_tag = $site->SITE_XML_LINK_TAG2;    }    if($site->SITE_XML_TRIM_TAG!=""){        $new_price_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_PRICE_TAG);        $new_discount_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_DISCOUNT_TAG);        $new_stock_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_STOCK_TAG);        $new_affiliate_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_AFFILIATE_TAG);        $new_main_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_MAIN_TAG);        $new_product_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_PRODUCT_TAG);    }    $dizi = array();    if($site->SITE_XML_ZIP==1){        /*                $zip = new ZipArchive;                $zip->open($paths['path'].$paths['main'].$site->SITE_XML_ZIP_LINK);                $zip->extractTo($paths['path'].$paths['main']."/xml");        */        $xml = simplexml_load_file($paths['path'].$paths['main'].$site->SITE_XML_LINK, 'SimpleXMLElement', LIBXML_NOCDATA);    }else{        if($site->SITE_XML_TYPE==1){            $xml = simplexml_load_file($paths['path'].$paths['main'].$site->SITE_XML_LINK, 'SimpleXMLElement', LIBXML_NOCDATA);        }else{            $xml = simplexml_load_file($paths['path'].$paths['main']."/xml/".permalink($site->SITE_NAME).".xml", 'SimpleXMLElement', LIBXML_NOCDATA);        }    }    if($site->SITE_XML_RSS==2){        $results = $xml->xpath('/rss/'.$new_main_tag.'/'.$new_product_tag.'['.$new_link_tag.'="'.$link.'"]');    }else{        $results = $xml->xpath('/'.$new_main_tag.'/'.$new_product_tag.'['.$new_link_tag.'="'.$link.'"]');    }    foreach($results as $result) {        if($new_affiliate_tag!=""){            if($result->$new_affiliate_tag!="") {                $dizi['affiliate'] = $result->$new_affiliate_tag;            }else{                $dizi['affiliate'] = 0;            }        }else{            $dizi['affiliate'] = 0;        }        break;    }    return $dizi;}function xml_cek($site_id, $link){    require_once 'Site.class.php';    $paths = parse_ini_file("/var/www/app/defines.php");    $site = new Site();    $site->find($site_id);    $new_price_tag = $site->SITE_XML_PRICE_TAG;    $new_discount_tag = $site->SITE_XML_DISCOUNT_TAG;    $new_stock_tag = $site->SITE_XML_STOCK_TAG;    $new_affiliate_tag = $site->SITE_XML_AFFILIATE_TAG;    $new_main_tag = $site->SITE_XML_MAIN_TAG;    $new_product_tag = $site->SITE_XML_PRODUCT_TAG;    $new_link_tag = $site->SITE_XML_LINK_TAG;    $new_currency_tag = $site->SITE_XML_CURRENCY_TAG;    $new_region_tag = $site->SITE_XML_REGION_TAG;    if($site->SITE_XML_LINK_TAG_DOUBLE==1){        $link = str_replace($site->SITE_XML_LINK_TAG, '', $link);        $new_link_tag = $site->SITE_XML_LINK_TAG2;    }elseif($site->SITE_XML_LINK_TAG_DOUBLE==2){        if($site->SITE_XML_TRIM_LINK2!=""){            $between = get_string_between($link, $site->SITE_XML_TRIM_LINK, $site->SITE_XML_TRIM_LINK2);            $link = str_replace($site->SITE_XML_TRIM_LINK.$between, '', $link);            $link = str_replace($site->SITE_XML_TRIM_LINK2, '', $link);        }else{            $link = str_replace($site->SITE_XML_TRIM_LINK, '', $link);        }    }    if($site->SITE_XML_TRIM_TAG!=""){        $new_price_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_PRICE_TAG);        $new_discount_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_DISCOUNT_TAG);        $new_stock_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_STOCK_TAG);        $new_affiliate_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_AFFILIATE_TAG);        $new_main_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_MAIN_TAG);        $new_product_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_PRODUCT_TAG);        $new_currency_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_CURRENCY_TAG);        $new_region_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_REGION_TAG);    }    $dizi = array();    if($site->SITE_XML_ZIP==1){        /*                $zip = new ZipArchive;                $zip->open($paths['path'].$paths['main'].$site->SITE_XML_ZIP_LINK);                $zip->extractTo($paths['path'].$paths['main']."/xml");        */        $xml = simplexml_load_file($paths['xmlUrl'].$site->SITE_XML_LINK, 'SimpleXMLElement', LIBXML_NOCDATA);        /*                $xml_link = $zip->getFromName($site->SITE_XML_LINK);                $xml = simplexml_load_string($xml_link);        */        /*                $json = json_encode($xml);                $array = json_decode($json,TRUE);        */    }else{        if($site->SITE_XML_TYPE==1){            $xml = simplexml_load_file($paths['xmlUrl'].$site->SITE_XML_LINK, 'SimpleXMLElement', LIBXML_NOCDATA);            /*            $json = json_encode($xml);            $array = json_decode($json,TRUE);*/        }else{            $xml = simplexml_load_file($paths['xmlUrl']."/xml/".permalink($site->SITE_NAME).".xml", 'SimpleXMLElement', LIBXML_NOCDATA);            /*            $json = json_encode($xml);            $array = json_decode($json,TRUE);*/            /*                        if($site->SITE_XML_TRIM_TAG!=""){                            $response_xml_data = file_get_contents($paths['path'].$paths['main']."/xml/".permalink($site->SITE_NAME).".xml");                            $response_xml_data = str_replace($site->SITE_XML_PRICE_TAG, str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_PRICE_TAG), $response_xml_data);                            $new_price_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_PRICE_TAG);                            $response_xml_data = str_replace($site->SITE_XML_DISCOUNT_TAG, str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_DISCOUNT_TAG), $response_xml_data);                            $new_discount_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_DISCOUNT_TAG);                            $response_xml_data = str_replace($site->SITE_XML_STOCK_TAG, str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_STOCK_TAG), $response_xml_data);                            $new_stock_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_STOCK_TAG);                            $response_xml_data = str_replace($site->SITE_XML_AFFILIATE_TAG, str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_AFFILIATE_TAG), $response_xml_data);                            $new_affiliate_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_AFFILIATE_TAG);                            $response_xml_data = str_replace($site->SITE_XML_MAIN_TAG, str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_MAIN_TAG), $response_xml_data);                            $new_main_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_MAIN_TAG);                            $response_xml_data = str_replace($site->SITE_XML_PRODUCT_TAG, str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_PRODUCT_TAG), $response_xml_data);                            $new_product_tag = str_replace($site->SITE_XML_TRIM_TAG, "", $site->SITE_XML_PRODUCT_TAG);                            $xml = simplexml_load_string($response_xml_data, 'SimpleXMLElement', LIBXML_NOCDATA);                            $json = json_encode($xml);                            $array = json_decode($json,TRUE);                        }else{                            $xml = simplexml_load_file($paths['path'].$paths['main']."/xml/".permalink($site->SITE_NAME).".xml", 'SimpleXMLElement', LIBXML_NOCDATA);                            $json = json_encode($xml);                            $array = json_decode($json,TRUE);                        }                        */        }    }    /*        $product_tag = explode(",", $site->SITE_XML_PRODUCT_TAG);        if(count($product_tag)==1){            $a = dizi_bul($link ,$site->SITE_XML_PRODUCT_TAG);        }elseif(count($product_tag)==2){            $a = dizi_bul($link ,$array[$product_tag[0]][$product_tag[1]]);        }    */    if($new_currency_tag!="" && $site->SITE_XML_CURRENCY_TEXT!=""){        $xml_currency = '['.$new_currency_tag.'="'.$site->SITE_XML_CURRENCY_TEXT.'"]';    }else{        $xml_currency = '';    }    if($new_region_tag!="" && $site->SITE_XML_REGION_TEXT!=""){        if($site->SITE_XML_REGION_TEXT2!=""){            $region_arr = array();            array_push($region_arr, 'contains('.$new_region_tag.', "'.$site->SITE_XML_REGION_TEXT.'")');            array_push($region_arr, 'contains('.$new_region_tag.', "'.$site->SITE_XML_REGION_TEXT2.'")');            $xml_region = '['.implode(" or ", $region_arr).']';        }else{            $xml_region = '['.$new_region_tag.'="'.$site->SITE_XML_REGION_TEXT.'"]';        }    }else{        $xml_region = '';    }    if($site->SITE_XML_LINK_SEARCH==1){        if($site->SITE_XML_LINK_SEARCH_TAG1!="" && $site->SITE_XML_LINK_SEARCH_TAG2==""){            $query = $site->SITE_XML_PRODUCT_PATH.$xml_currency.$xml_region.'["'.$site->SITE_XML_LINK_SEARCH_TAG1.$link.'" = substring('.$new_link_tag.', string-length('.$new_link_tag.') - '.(strlen($site->SITE_XML_LINK_SEARCH_TAG1.$link)-1).')]';            //$query = '/feed/entry["%2Fsniper-ghost-warrior-3" = substring(link, string-length(link) - 24)]';            $results = $xml->xpath($query);        }elseif($site->SITE_XML_LINK_SEARCH_TAG1=="" && $site->SITE_XML_LINK_SEARCH_TAG2!=""){            $query = $site->SITE_XML_PRODUCT_PATH.$xml_currency.$xml_region.'["'.$link.$site->SITE_XML_LINK_SEARCH_TAG2.'" = substring('.$new_link_tag.', string-length('.$new_link_tag.') - '.(strlen($link.$site->SITE_XML_LINK_SEARCH_TAG2)-1).')]';            //$query = '/feed/entry["%2Fsniper-ghost-warrior-3" = substring(link, string-length(link) - 24)]';            $results = $xml->xpath($query);        }elseif($site->SITE_XML_LINK_SEARCH_TAG1=="" && $site->SITE_XML_LINK_SEARCH_TAG2==""){            //$query = $site->SITE_XML_PRODUCT_PATH.$xml_currency.$xml_region.'["'.$link.'" = substring('.$new_link_tag.', string-length('.$new_link_tag.') - '.(strlen($site->SITE_XML_LINK_SEARCH_TAG1.$link)-1).')]';            //$results = $xml->xpath($query);            $results = $xml->xpath($site->SITE_XML_PRODUCT_PATH.$xml_currency.$xml_region.'/'.$new_link_tag.'[contains(.,"'.$link.'")]');        }else{            $results = $xml->xpath($site->SITE_XML_PRODUCT_PATH.$xml_currency.$xml_region.'/'.$new_link_tag.'[contains(.,"'.$site->SITE_XML_LINK_SEARCH_TAG1.$link.$site->SITE_XML_LINK_SEARCH_TAG2.'")]');        }    }else{        $results = $xml->xpath($site->SITE_XML_PRODUCT_PATH.$xml_currency.$xml_region.'['.$new_link_tag.'="'.$link.'"]');    }    /*        if($site->SITE_XML_RSS==2){            $results = $xml->xpath('/rss/'.$new_main_tag.'/'.$new_product_tag.'['.$new_link_tag.'="'.$link.'"]');        }else{            $results = $xml->xpath('/'.$new_main_tag.'/'.$new_product_tag.'['.$new_link_tag.'="'.$link.'"]');        }*/    foreach($results as $result) {        if($site->SITE_XML_LINK_SEARCH==1){            if(($site->SITE_XML_LINK_SEARCH_TAG1!=""&&$site->SITE_XML_LINK_SEARCH_TAG2!="") || ($site->SITE_XML_LINK_SEARCH_TAG1==""&&$site->SITE_XML_LINK_SEARCH_TAG2=="")){                $za = $xml->xpath($site->SITE_XML_PRODUCT_PATH.$xml_currency.$xml_region.'['.$new_link_tag.'="'.$result.'"]');                $result = $za[0];            }        }        if($new_price_tag!=""){            if($result->$new_price_tag!=""){                $dizi['price'] = (string) $result->$new_price_tag;            }else{                if($new_discount_tag!=""){                    if($result->$new_discount_tag!="") {                        $dizi['price'] = (string) $result->$new_discount_tag;                    }else{                        $dizi['price'] = 0;                    }                }else{                    $dizi['price'] = 0;                }            }        }else{            $dizi['price'] = 0;        }        if($new_discount_tag!=""){            if($result->$new_discount_tag!="") {                $dizi['discount'] = (string) $result->$new_discount_tag;            }else{                $dizi['discount'] = 0;            }        }else{            $dizi['discount'] = 0;        }        if($new_stock_tag!=""){            if($result->$new_stock_tag!="") {                if ($result->$new_stock_tag == $site->SITE_XML_STOCK_TEXT) {                    $dizi['outofstock'] = 0;                } else {                    $dizi['outofstock'] = 1;                }            }else{                $dizi['outofstock'] = 0;            }        }else{            $dizi['outofstock'] = 0;        }        if($new_affiliate_tag!=""){            if($result->$new_affiliate_tag!="") {                $dizi['affiliate'] = (string) htmlentities($result->$new_affiliate_tag);            }else{                $dizi['affiliate'] = "";            }        }else{            $dizi['affiliate'] = "";        }        break;    }    /*        if($new_main_tag!=""){            $a = dizi_bul($link ,$array[$new_main_tag][$new_product_tag]);        }else{            $a = dizi_bul($link ,$array[$new_product_tag]);        }    */    //$a = dizi_bul($link ,$array[$site->SITE_XML_PRODUCT_TAG]);    /*        if($new_price_tag!=""){            if($a[0][$new_price_tag]!=""){                $dizi['price'] = $a[0][$new_price_tag];            }else{                $dizi['price'] = 0;            }        }else{            $dizi['price'] = 0;        }        if($new_discount_tag!=""){            if($a[0][$new_discount_tag]!="") {                $dizi['discount'] = $a[0][$new_discount_tag];            }else{                $dizi['discount'] = 0;            }        }else{            $dizi['discount'] = 0;        }        if($new_stock_tag!=""){            if($a[0][$new_stock_tag]!="") {                if ($a[0][$new_stock_tag] == $site->SITE_XML_STOCK_TEXT) {                    $dizi['outofstock'] = 0;                } else {                    $dizi['outofstock'] = 1;                }            }else{                $dizi['outofstock'] = 0;            }        }else{            $dizi['outofstock'] = 0;        }        if($new_affiliate_tag!=""){            if($a[0][$new_affiliate_tag]!="") {                $dizi['affiliate'] = $a[0][$new_affiliate_tag];            }else{                $dizi['affiliate'] = 0;            }        }else{            $dizi['affiliate'] = 0;        }    */    return $dizi;    /*        if($site->SITE_XML_ZIP==1){            $zip = new ZipArchive;            $zip->open('xml/'.$site->SITE_XML_ZIP_LINK);            $xml_link = $zip->getFromName($site->SITE_XML_LINK);        }else{            $xml_link = $site->SITE_XML_LINK;        }        $response_xml_data = file_get_contents($xml_link);        $xml = simplexml_load_string($response_xml_data);        $json = json_encode($xml);        $array = json_decode($json,TRUE);        $a = dizi_bul($link ,$array[$site->SITE_XML_MAIN_TAG]);        return $a[0][$site->SITE_XML_PRODUCT_TAG];    */    /*        $dom = new DOMDocument();        $dom->load($xml_link);        $icerik = $dom->getElementsByTagName($xml_tag);        foreach($icerik as $item){            if(is_object($item)){                $tag11 = $item->getElementsByTagName($tag1);                if(is_object($tag11)){                    if(!empty($tag11->item(0)->nodeValue)){                        $tag11 = $tag11->item(0)->nodeValue;                        $tag22 = $item->getElementsByTagName($tag2);                        $tag22 = $tag22->item(0)->nodeValue;                        if($tag11 == $link){                            return $tag22;                            break;                        }                    }                }            }        }        */}function veri_cek($link, $tag1, $tag2, $dom=0, $sira=0, $site_id=0){    $arrContextOptions=array(        "ssl"=>array(            "verify_peer"=>false,            "verify_peer_name"=>false,        ),        'http' => array(            'method' => 'GET',            'timeout' => 30,            'ignore_errors' => true,        ));    $curl = new Zebra_cURL();    //$curl->cache('cache', 3600);    //$curl->option(CURLOPT_PROXY, '46.221.9.22');    //$curl->option(CURLOPT_PROXYPORT, 8080);    //$curl->ssl(true, 2, __DIR__ . '/cacert.pem');    $curl->option(CURLOPT_FOLLOWLOCATION, false);    $icerik = $curl->scrap($link, true);    if($dom==1){        $html = str_get_html($icerik);        $tagg = $tag1.$tag2;        if($html === false){        }else{            $fiyat = $html->find($tagg, $sira);            if(is_object($fiyat)) {                $fiyat = $fiyat->plaintext;            }else{                if($fiyat==0 || empty($fiyat) || $fiyat==""){                    if (false !== ($icerik = @file_get_contents($link, false, stream_context_create($arrContextOptions)))) {                        $icerik = @str_get_html(file_get_contents($link, false, stream_context_create($arrContextOptions)));                        $fiyat = $icerik->find($tagg, $sira);                        if(is_object($fiyat)) {                            $fiyat = $fiyat->plaintext;                        }                    } else {                        $fiyat = 0;                    }                }            }            if(!empty($fiyat)){                return $fiyat;            }else{                return 0;            }        }    }elseif($dom==0){        $fiyat = veri_cekk($tag1, $tag2, $icerik);        if(array_key_exists($sira, $fiyat)){            if($fiyat[$sira]==0){                $icerik = file_get_contents($link, false, stream_context_create($arrContextOptions));                $fiyat = veri_cekk($tag1, $tag2, $icerik);            }        }        if(!empty($fiyat[$sira])){            return $fiyat[$sira];        }else{            return 0;        }    }}function veri_cek_toplu($link, $tag1, $tag2, $dom=0){    $arrContextOptions=array(        "ssl"=>array(            "verify_peer"=>false,            "verify_peer_name"=>false,        ),        'http' => array(            'method' => 'GET',            'timeout' => 30,            'ignore_errors' => true,        ));    $curl = new Zebra_cURL();    //$curl->cache('cache', 3600);    //$curl->option(CURLOPT_PROXY, '46.221.9.22');    //$curl->option(CURLOPT_PROXYPORT, 8080);    //$curl->ssl(true, 2, __DIR__ . '/cacert.pem');    $icerik = $curl->scrap($link, true);    if($dom==1){        $html = str_get_html($icerik);        $tagg = $tag1.$tag2;        if($html === false){        }else{            $fiyat = $html->find($tagg);            if(!empty($fiyat)) {                $array = array();                foreach ($fiyat as $a){                    if(is_object($a)) {                        array_push($array, $a->plaintext);                    }                }                $fiyat = $array;            }else{                if($fiyat==0 || empty($fiyat) || $fiyat==""){                    $icerik = str_get_html(file_get_contents($link, false, stream_context_create($arrContextOptions)));                    $fiyat = $icerik->find($tagg);                    $array = array();                    foreach ($fiyat as $a){                        if(is_object($a)) {                            array_push($array, $a->plaintext);                        }                    }                    $fiyat = $array;                }            }            if(!empty($fiyat)){                return $fiyat;            }else{                return array();            }        }    }elseif($dom==0){        $fiyat = veri_cekk($tag1, $tag2, $icerik);        if(!empty($fiyat)){            return $fiyat;        }else{            return array();        }    }}function indirim_yuzde($price, $discount){    if($discount!=0 && is_numeric($discount)){        return ($discount - $price)/($discount/100);    }else{        return 0;    }}function searcharray($value, $key, $array) {    foreach ($array as $k => $val) {        if ($val[$key] == $value) {            return $val;        }    }    return null;}function searchWords($string, $words){    foreach($words as $word) {        if(stristr($string, $word)){            return true;        }    }    return false;}function equalWords($string, $words){    foreach($words as $word) {        if($string==$word){            return true;        }    }    return false;}function array_to_xml( $data, &$xml_data ) {    foreach( $data as $key => $value ) {        /*        if($value==""){            $value = " ";        }        */        if( is_array($value) ) {            if( is_numeric($key) ){                $key = 'item'; //dealing with <0/>..<n/> issues            }            $subnode = $xml_data->addChild($key);            array_to_xml($value, $subnode);        } else {            $xml_data->addChild("$key",htmlspecialchars("$value"));        }    }}function get_string_between($string, $start, $end){    $string = ' ' . $string;    $ini = strpos($string, $start);    if ($ini == 0) return '';    $ini += strlen($start);    $len = strpos($string, $end, $ini) - $ini;    return substr($string, $ini, $len);}function is_connected(){    $connected = @fsockopen("www.example.com", 80);    //website, port  (try 80 or 443)    if ($connected){        $is_conn = true; //action when connected        fclose($connected);    }else{        $is_conn = false; //action in connection failure    }    return $is_conn;}function get_http_response_code($url) {    $headers = get_headers($url);    return substr($headers[0], 9, 3);}function ip_info($ip = NULL, $purpose = "location", $deep_detect = TRUE) {    $output = NULL;    if(filter_var($ip, FILTER_VALIDATE_IP) === FALSE) {        if ($deep_detect) {            if (filter_var(@$_SERVER['HTTP_X_FORWARDED_FOR'], FILTER_VALIDATE_IP)){                $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];            }            if (filter_var(@$_SERVER['HTTP_CLIENT_IP'], FILTER_VALIDATE_IP)){                $ip = $_SERVER['HTTP_CLIENT_IP'];            }        }    }    $purpose = str_replace(array("name", "\n", "\t", " ", "-", "_"), NULL, strtolower(trim($purpose)));    $support = array("country", "countrycode", "state", "region", "city", "location", "address");    $continents = array(        "AF" => "Africa",        "AN" => "Antarctica",        "AS" => "Asia",        "EU" => "Europe",        "OC" => "Australia (Oceania)",        "NA" => "North America",        "SA" => "South America",        "TR" => "Türkiye",    );    if (filter_var($ip, FILTER_VALIDATE_IP) && in_array($purpose, $support)) {        $ipdat = @json_decode(file_get_contents("http://www.geoplugin.net/json.gp?ip=". $ip));        if (@strlen(trim($ipdat->geoplugin_countryCode)) == 2) {            switch ($purpose) {                case "city":                    $output = @$ipdat->geoplugin_city;                    break;                case "countrycode":                    $output = @$ipdat->geoplugin_countryCode;                    break;            }        }    }    return $output;}function CallAPI($method, $url, $data = false){    $curl = curl_init();    switch ($method)    {        case "POST":            curl_setopt($curl, CURLOPT_POST, 1);            if ($data)                curl_setopt($curl, CURLOPT_POSTFIELDS, $data);            break;        case "PUT":            curl_setopt($curl, CURLOPT_PUT, 1);            break;        default:            if ($data)                $url = sprintf("%s?%s", $url, http_build_query($data));    }    curl_setopt($curl, CURLOPT_URL, $url);    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);    $result = curl_exec($curl);    curl_close($curl);    return $result;}function randomString($length = 16, $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'){    $charactersLength = strlen($characters);    $randomString = '';    for ($i = 0; $i < $length; $i++) {        $randomString .= $characters[rand(0, $charactersLength - 1)];    }    return $randomString;}function scrapeText($start, $end, $text){    @preg_match_all('/' . preg_quote($start, '/') .        '(.*?)'. preg_quote($end, '/').'/i', $text, $m);    return @$m[1];}function scrapeLinkSingle($url, $startTag, $endTag, $isDom = 0, $order = 0){    $arrContextOptions=array(        "ssl"=>array(            "verify_peer"=>false,            "verify_peer_name"=>false,        ),        'http' => array(            'method' => 'GET',            'timeout' => 30,            'ignore_errors' => true,        ));    $curl = new Zebra_cURL();    $urlContent = $curl->scrap($url, true);    if($isDom==1){        $html = str_get_html($urlContent);        $fullTag = $startTag.$endTag;        if($html === false){            return "HTML Dom Error";        }else{            $result = $html->find($fullTag, $order);            if(is_object($result)) {                $result = $result->plaintext;            }else{                if($result==0 || empty($result) || $result==""){                    if (false !== ($urlContent = @file_get_contents($url, false, stream_context_create($arrContextOptions)))) {                        $urlContent = @str_get_html(file_get_contents($url, false, stream_context_create($arrContextOptions)));                        $result = $urlContent->find($fullTag, $order);                        if(is_object($result)) {                            $result = $result->plaintext;                        }                    } else {                        $result = 0;                    }                }            }            if(!empty($result)){                return $result;            }else{                return 0;            }        }    }elseif($isDom==0){        $result = scrapeText($startTag, $endTag, $urlContent);        if(array_key_exists($order, $result)){            if($result[$order]==0){                $urlContent = file_get_contents($url, false, stream_context_create($arrContextOptions));                $result = scrapeText($startTag, $endTag, $urlContent);            }        }        if(!empty($result[$order])){            return $result[$order];        }else{            return 0;        }    }}function scrapeLinkMultiple($url, $startTag, $endTag, $isDom = 0){    $arrContextOptions=array(        "ssl"=>array(            "verify_peer"=>false,            "verify_peer_name"=>false,        ),        'http' => array(            'method' => 'GET',            'timeout' => 30,            'ignore_errors' => true,        ));    $hc = "Mozilla/5.0 (Windows NT 6.2; WOW64; rv:17.0) Gecko/20100101 Firefox/17.0";    $curl = new Zebra_cURL();    $curl->option(CURLOPT_REFERER, 'http://www.google.com');    $curl->option(CURLOPT_USERAGENT, $hc);    $curl->option(CURLOPT_RETURNTRANSFER, 1);//    $curl->option(CURLOPT_FOLLOWLOCATION, false);    $urlContent = $curl->scrap($url, true);    if($isDom==1){        $html = str_get_html($urlContent);        $fullTag = $startTag.$endTag;        if($html === false){            return "HTML Dom Error";        }else{            $result = $html->find($fullTag);            if(count($result)>0) {                foreach ($result as $r){                    $domResult[] = $r->plaintext;                }                return $domResult;            }else{                return false;            }        }    }elseif($isDom==0){        $result = scrapeText($startTag, $endTag, $urlContent);        if(count($result)>0){            $urlContent = file_get_contents($url, false, stream_context_create($arrContextOptions));            $result = scrapeText($startTag, $endTag, $urlContent);            return $result;        }else{            return false;        }    }}function merge_arrays_by_index($arrays) {    $result = array();    foreach ($arrays as $array) {        foreach ($array as $index => $value) {            if (isset($result[$index])) {                $result[$index][] = $value;            } else {                $result[$index] = array($value);            }        }    }    return $result;}function change_nested_index_names($array, $old_names, $new_names) {    foreach ($array as &$sub_array) {        foreach ($old_names as $index => $old_name) {            $new_name = $new_names[$index];            if (isset($sub_array[$old_name])) {                $sub_array[$new_name] = $sub_array[$old_name];                unset($sub_array[$old_name]);            }        }    }    return $array;}